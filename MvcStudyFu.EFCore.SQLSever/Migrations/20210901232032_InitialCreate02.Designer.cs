// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcStudyFu.EFCore.SQLSever;

namespace MvcStudyFu.EFCore.SQLSever.Migrations
{
    [DbContext(typeof(StudyMVCDBContext))]
    [Migration("20210901232032_InitialCreate02")]
    partial class InitialCreate02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.Resource", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("ResourceId");

                    b.ToTable("Resource");

                    b.HasData(
                        new
                        {
                            ResourceId = new Guid("ff7eea02-6e3f-494e-bab5-89cbfb2f6111"),
                            Icon = "el-icon-user-solid",
                            Level = 0L,
                            Path = "",
                            ResourceName = "个人管理",
                            Sort = 0
                        },
                        new
                        {
                            ResourceId = new Guid("da2a83b3-89d2-4cb9-8458-3e1150539a87"),
                            Icon = "el-icon-s-tools",
                            Level = 0L,
                            Path = "",
                            ResourceName = "系统管理",
                            Sort = 1
                        },
                        new
                        {
                            ResourceId = new Guid("f1ea2857-30db-49b5-8498-27e51b27f8ed"),
                            Icon = "el-icon-s-grid",
                            Level = 1L,
                            ParentId = new Guid("ff7eea02-6e3f-494e-bab5-89cbfb2f6111"),
                            Path = "/PersonalInfo/Index",
                            ResourceName = "个人信息",
                            Sort = 0
                        },
                        new
                        {
                            ResourceId = new Guid("1fb137a3-8e02-43bf-9a98-c8665f02d145"),
                            Icon = "el-icon-s-grid",
                            Level = 1L,
                            ParentId = new Guid("ff7eea02-6e3f-494e-bab5-89cbfb2f6111"),
                            Path = "/Study/Studyknowledge",
                            ResourceName = "学习数据",
                            Sort = 1
                        },
                        new
                        {
                            ResourceId = new Guid("110fa9e0-4d9c-425d-b6a5-c5426fa7d2ff"),
                            Icon = "el-icon-s-grid",
                            Level = 1L,
                            ParentId = new Guid("ff7eea02-6e3f-494e-bab5-89cbfb2f6111"),
                            Path = "/Journal/Index",
                            ResourceName = "日志记录",
                            Sort = 2
                        },
                        new
                        {
                            ResourceId = new Guid("e807cfd4-fb6e-4efa-8d4e-f5efe9734f8e"),
                            Icon = "el-icon-s-grid",
                            Level = 1L,
                            ParentId = new Guid("da2a83b3-89d2-4cb9-8458-3e1150539a87"),
                            Path = "/UserManage/Index",
                            ResourceName = "用户管理",
                            Sort = 0
                        },
                        new
                        {
                            ResourceId = new Guid("e1d23ef1-74b4-4677-9c56-4f4c168a6ce2"),
                            Icon = "el-icon-s-grid",
                            Level = 1L,
                            ParentId = new Guid("da2a83b3-89d2-4cb9-8458-3e1150539a87"),
                            Path = "/Role/Index",
                            ResourceName = "角色管理",
                            Sort = 1
                        },
                        new
                        {
                            ResourceId = new Guid("648e04bb-2d3e-477e-b2a5-bc807af94dfa"),
                            Icon = "el-icon-s-grid",
                            Level = 1L,
                            ParentId = new Guid("da2a83b3-89d2-4cb9-8458-3e1150539a87"),
                            Path = "/Permissions/index",
                            ResourceName = "权限管理",
                            Sort = 2
                        });
                });

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleDescribe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("98cec3b9-9913-4ee0-b055-0fdf772395a9"),
                            RoleDescribe = "拥有一切权利",
                            RoleName = "统治者"
                        },
                        new
                        {
                            RoleId = new Guid("235e0d66-c040-4adb-ae74-1166ec1f92f3"),
                            RoleDescribe = "没有改变权限的能力",
                            RoleName = "大将"
                        },
                        new
                        {
                            RoleId = new Guid("169c0fcd-b2ac-4686-8255-8580edc5dc8f"),
                            RoleDescribe = "基本功能的使用",
                            RoleName = "平民"
                        });
                });

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.RoleResouce", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleResouceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("RoleResouce");
                });

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.StudyType", b =>
                {
                    b.Property<int>("StudyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudyTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudyTypeId");

                    b.ToTable("StudyType");

                    b.HasData(
                        new
                        {
                            StudyTypeId = 1,
                            StudyTypeName = "前端"
                        },
                        new
                        {
                            StudyTypeId = 2,
                            StudyTypeName = "后端"
                        },
                        new
                        {
                            StudyTypeId = 3,
                            StudyTypeName = "数据库"
                        });
                });

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.Studyknowledge", b =>
                {
                    b.Property<Guid>("StudyknowledgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StudyknowledgeContent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StudyknowledgeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StudyknowledgeId");

                    b.HasIndex("StudyTypeId");

                    b.ToTable("Studyknowledge");
                });

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("98cec3b9-9913-4ee0-b055-0fdf772395a9"),
                            UserId = new Guid("99ce8e1c-dcfc-40d7-910a-0b744f9697a3"),
                            UserRoleId = new Guid("36bd4625-377f-4331-ab29-333bd3b54cce")
                        });
                });

            modelBuilder.Entity("StudyMVCFu.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Account")
                        .HasMaxLength(20)
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Hobby")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool?>("IsDel")
                        .HasColumnType("bit");

                    b.Property<string>("Moblie")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("QQ")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99ce8e1c-dcfc-40d7-910a-0b744f9697a3"),
                            Account = 1314520m,
                            Birthday = new DateTime(2001, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hobby = "Do Love",
                            Name = "小杰"
                        });
                });

            modelBuilder.Entity("StudyMVCFu.Model.UserPassword", b =>
                {
                    b.Property<Guid>("UserPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastPassword")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NewPassword")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserPasswordId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPassword");

                    b.HasData(
                        new
                        {
                            UserPasswordId = new Guid("4af32f3c-c609-4c7b-a928-febc079d6a68"),
                            NewPassword = "E10ADC3949BA59ABBE56E057F20F883E",
                            UserId = new Guid("99ce8e1c-dcfc-40d7-910a-0b744f9697a3")
                        });
                });

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.RoleResouce", b =>
                {
                    b.HasOne("StudyMVCFu.Model.DomainModel.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyMVCFu.Model.DomainModel.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.Studyknowledge", b =>
                {
                    b.HasOne("StudyMVCFu.Model.DomainModel.StudyType", "StudyType")
                        .WithMany("Studyknowledge")
                        .HasForeignKey("StudyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyType");
                });

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.UserRole", b =>
                {
                    b.HasOne("StudyMVCFu.Model.DomainModel.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyMVCFu.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyMVCFu.Model.UserPassword", b =>
                {
                    b.HasOne("StudyMVCFu.Model.User", "User")
                        .WithOne("UserPassword")
                        .HasForeignKey("StudyMVCFu.Model.UserPassword", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyMVCFu.Model.DomainModel.StudyType", b =>
                {
                    b.Navigation("Studyknowledge");
                });

            modelBuilder.Entity("StudyMVCFu.Model.User", b =>
                {
                    b.Navigation("UserPassword");
                });
#pragma warning restore 612, 618
        }
    }
}
